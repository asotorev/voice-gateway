service: voice-gateway-lambda

frameworkVersion: "3"

provider:
  name: aws
  runtime: ${env:LAMBDA_RUNTIME, 'python3.9'}
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:STAGE, 'dev'}
  timeout: ${env:LAMBDA_TIMEOUT, '900'}
  memorySize: ${env:LAMBDA_MEMORY_SIZE, '3008'}

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    S3_BUCKET_NAME: voice-gateway-audio-${self:provider.stage}
    USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
    LOG_LEVEL: ${env:LAMBDA_LOG_LEVEL, 'INFO'}
    MAX_AUDIO_FILE_SIZE_MB: ${env:MAX_AUDIO_FILE_SIZE_MB, '10'}
    REQUIRED_AUDIO_SAMPLES: ${env:REQUIRED_AUDIO_SAMPLES, '3'}
    PROCESSING_TIMEOUT_SECONDS: ${env:PROCESSING_TIMEOUT_SECONDS, '180'}
    LAMBDA_MAX_RETRIES: ${env:LAMBDA_MAX_RETRIES, '3'}
    VOICE_EMBEDDING_DIMENSIONS: ${env:VOICE_EMBEDDING_DIMENSIONS, '256'}
    EMBEDDING_PROCESSOR_TYPE: ${env:EMBEDDING_PROCESSOR_TYPE, 'mock'}
    # Webhook notifications
    ENABLE_NOTIFICATIONS: ${env:ENABLE_NOTIFICATIONS, 'true'}
    NOTIFICATION_WEBHOOK_URL: ${env:NOTIFICATION_WEBHOOK_URL, ''}

  iam:
    role:
      statements:
        # S3 permissions for audio file access
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::voice-gateway-audio-${self:provider.stage}/*

        # DynamoDB permissions for user updates
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE_NAME}

        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  audioEmbeddingProcessor:
    handler: handler.lambda_handler
    description: "Process audio files to generate voice embeddings"
    # reservedConcurrency: ${env:LAMBDA_CONCURRENT_EXECUTIONS, '10'}

    events:
      # S3 trigger for new audio uploads (bucket will be created automatically)
      - s3:
          bucket: voice-gateway-audio-${self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: audio-uploads-${self:provider.stage}/

    layers:
      # Custom PyTorch layer (optimized)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-pytorch-prod:1
      # AWS SciPy layer (numpy, scipy) - official AWS layer
      - arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python39-SciPy1x:115
      # Consolidated Voice Gateway layer (resemblyzer, audio-utils, shared-code)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-consolidated-prod:1

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: false

package:
  patterns:
    - "../*.py"
    - "../**/*.py"
    - "!../tests/**"
    - "!../**/__pycache__/**"
    - "!../deployment/**"
    - "!node_modules/**"
    - "!.git/**"
    - "!.pytest_cache/**"
    - "!.env"
    - "!.DS_Store"

resources:
  Description: "Voice Gateway Lambda functions for audio processing"
