service: ${env:SERVERLESS_SERVICE_NAME, 'voice-gateway-auth-lambda'}

frameworkVersion: "3"

provider:
  name: ${env:SERVERLESS_PROVIDER_NAME, 'aws'}
  runtime: ${env:LAMBDA_RUNTIME, 'python3.9'}
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:STAGE, 'dev'}
  timeout: ${env:LAMBDA_TIMEOUT, '300'}
  memorySize: ${env:LAMBDA_MEMORY_SIZE, '2048'}

  environment:
    STAGE: ${self:provider.stage}
    AWS_REGION: ${self:provider.region}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    S3_AUTH_PREFIX: ${env:S3_AUTH_PREFIX, 'voice-auth/'}
    USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
    LOG_LEVEL: ${env:LAMBDA_LOG_LEVEL, 'INFO'}
    MAX_AUDIO_FILE_SIZE_MB: ${env:MAX_AUDIO_FILE_SIZE_MB, '10'}
    PROCESSING_TIMEOUT_SECONDS: ${env:PROCESSING_TIMEOUT_SECONDS, '180'}
    LAMBDA_MAX_RETRIES: ${env:LAMBDA_MAX_RETRIES, '3'}

    # Voice Authentication Configuration
    VOICE_AUTH_THRESHOLD: ${env:VOICE_AUTH_THRESHOLD, '0.80'}
    VOICE_AUTH_MIN_SIMILARITY: ${env:VOICE_AUTH_MIN_SIMILARITY, '0.75'}
    VOICE_AUTH_HIGH_CONFIDENCE: ${env:VOICE_AUTH_HIGH_CONFIDENCE, '0.85'}

    # Whisper Configuration
    WHISPER_MODEL_SIZE: ${env:WHISPER_MODEL_SIZE, 'base'}
    WHISPER_LANGUAGE: ${env:WHISPER_LANGUAGE, 'es'}
    TRANSCRIPTION_CONFIDENCE_THRESHOLD: ${env:TRANSCRIPTION_CONFIDENCE_THRESHOLD, '0.7'}

    # Password Validation Configuration
    EXPECTED_WORD_COUNT: ${env:EXPECTED_WORD_COUNT, '3'}
    WORD_SEPARATOR: ${env:WORD_SEPARATOR, '-'}
    MIN_WORD_LENGTH: ${env:MIN_WORD_LENGTH, '3'}

  iam:
    role:
      statements:
        # S3 permissions for voice authentication audio access
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${env:S3_BUCKET_NAME}/*

        # DynamoDB permissions for user data access
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE_NAME}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE_NAME}/index/*

        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  voiceAuthenticationProcessor:
    handler: ${env:LAMBDA_FUNCTION_NAME, 'voice_authentication_processor'}.handler.lambda_handler
    description: "Process voice authentication requests with dual validation"
    reservedConcurrency: ${env:LAMBDA_CONCURRENT_EXECUTIONS, '5'}

    events:
      # S3 trigger for voice authentication requests
      - s3:
          bucket: ${env:S3_BUCKET_NAME}
          event: ${env:S3_TRIGGER_EVENT, 's3:ObjectCreated:*'}
          rules:
            - prefix: ${env:S3_AUTH_PREFIX, 'voice-auth/'}
            - suffix: .wav
      - s3:
          bucket: ${env:S3_BUCKET_NAME}
          event: ${env:S3_TRIGGER_EVENT, 's3:ObjectCreated:*'}
          rules:
            - prefix: ${env:S3_AUTH_PREFIX, 'voice-auth/'}
            - suffix: .mp3
      - s3:
          bucket: ${env:S3_BUCKET_NAME}
          event: ${env:S3_TRIGGER_EVENT, 's3:ObjectCreated:*'}
          rules:
            - prefix: ${env:S3_AUTH_PREFIX, 'voice-auth/'}
            - suffix: .m4a

    layers:
      # Shared layer with core authentication logic
      - ${cf:voice-gateway-shared-${self:provider.stage}.SharedLayerArn}

      # Whisper ML layer (for transcription)
      # - ${cf:voice-gateway-whisper-${self:provider.stage}.WhisperLayerArn}
      #
      # To create Whisper layer:
      # 1. Create separate layer with openai-whisper, torch
      # 2. Deploy layer stack first: cd layers && serverless deploy
      # 3. Uncomment layer reference above
      #
      # For now, dependencies are packaged with function

  # Health check function for monitoring
  voiceAuthHealthCheck:
    handler: ${env:LAMBDA_FUNCTION_NAME, 'voice_authentication_processor'}.presentation.lambda_handler.health_check_handler
    description: "Health check endpoint for voice authentication processor"
    events:
      - httpApi:
          path: /health
          method: get

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: false
    pipCmdExtraArgs:
      - --no-cache-dir

package:
  patterns:
    - "!node_modules/**"
    - "!.git/**"
    - "!.pytest_cache/**"
    - "!tests/**"
    - "!**/__pycache__/**"
    - "!.env"
    - "!.DS_Store"
    - "!*.pyc"

resources:
  Description: "Voice Gateway Voice Authentication Lambda functions"

  Outputs:
    VoiceAuthenticationProcessorArn:
      Description: "Voice Authentication Processor Lambda ARN"
      Value:
        Ref: VoiceAuthenticationProcessorLambdaFunction
      Export:
        Name: ${self:service}-${self:provider.stage}-VoiceAuthenticationProcessorArn

    VoiceAuthHealthCheckArn:
      Description: "Voice Authentication Health Check Lambda ARN"
      Value:
        Ref: VoiceAuthHealthCheckLambdaFunction
      Export:
        Name: ${self:service}-${self:provider.stage}-VoiceAuthHealthCheckArn
