service: voice-gateway-auth-lambda

frameworkVersion: "3"

provider:
  name: aws
  runtime: ${env:LAMBDA_RUNTIME, 'python3.9'}
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:STAGE, 'dev'}
  timeout: ${env:LAMBDA_TIMEOUT, '300'}
  memorySize: ${env:LAMBDA_MEMORY_SIZE, '2048'}

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    S3_BUCKET_NAME: voice-gateway-audio-${self:provider.stage}
    S3_AUTH_PREFIX: ${env:S3_AUTH_PREFIX, 'voice-auth/'}
    USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
    LOG_LEVEL: ${env:LAMBDA_LOG_LEVEL, 'INFO'}
    MAX_AUDIO_FILE_SIZE_MB: ${env:MAX_AUDIO_FILE_SIZE_MB, '10'}
    PROCESSING_TIMEOUT_SECONDS: ${env:PROCESSING_TIMEOUT_SECONDS, '180'}
    LAMBDA_MAX_RETRIES: ${env:LAMBDA_MAX_RETRIES, '3'}

    # Voice Authentication Configuration
    VOICE_AUTH_THRESHOLD: ${env:VOICE_AUTH_THRESHOLD, '0.80'}
    VOICE_AUTH_MIN_SIMILARITY: ${env:VOICE_AUTH_MIN_SIMILARITY, '0.75'}
    VOICE_AUTH_HIGH_CONFIDENCE: ${env:VOICE_AUTH_HIGH_CONFIDENCE, '0.85'}

    # OpenAI Transcription Configuration
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, 'placeholder-key'}
    TRANSCRIPTION_MODEL: ${env:TRANSCRIPTION_MODEL, 'whisper-1'}
    TRANSCRIPTION_LANGUAGE: ${env:TRANSCRIPTION_LANGUAGE, 'es'}
    TRANSCRIPTION_CONFIDENCE_THRESHOLD: ${env:TRANSCRIPTION_CONFIDENCE_THRESHOLD, '0.7'}
    TRANSCRIPTION_TIMEOUT: ${env:TRANSCRIPTION_TIMEOUT, '30'}

    # Password Validation Configuration
    EXPECTED_WORD_COUNT: ${env:EXPECTED_WORD_COUNT, '3'}
    WORD_SEPARATOR: ${env:WORD_SEPARATOR, '-'}
    MIN_WORD_LENGTH: ${env:MIN_WORD_LENGTH, '3'}

  iam:
    role:
      statements:
        # S3 permissions for voice authentication audio access
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::voice-gateway-audio-${self:provider.stage}/*

        # DynamoDB permissions for user data access
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE_NAME}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE_NAME}/index/*

        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  voiceAuthenticationProcessor:
    handler: handler.lambda_handler
    description: "Process voice authentication requests with dual validation"
    # reservedConcurrency: ${env:LAMBDA_CONCURRENT_EXECUTIONS, '5'}

    events:
      # S3 trigger for voice authentication requests
      - s3:
          bucket: voice-gateway-audio-${self:provider.stage}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: voice-auth-${self:provider.stage}/

    layers:
      # Custom PyTorch layer (optimized)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-pytorch-prod:1
      # AWS SciPy layer (numpy, scipy) - official AWS layer
      - arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python39-SciPy1x:115
      # Consolidated Voice Gateway layer (resemblyzer, audio-utils, shared-code)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-consolidated-prod:1

  # Health check function for monitoring
  voiceAuthHealthCheck:
    handler: presentation.lambda_handler.health_check_handler
    description: "Health check endpoint for voice authentication processor"
    layers:
      # Custom PyTorch layer (optimized)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-pytorch-prod:1
      # AWS SciPy layer (numpy, scipy) - official AWS layer
      - arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python39-SciPy1x:115
      # Consolidated Voice Gateway layer (resemblyzer, audio-utils, shared-code)
      - arn:aws:lambda:us-east-1:275794523564:layer:voice-gateway-consolidated-prod:1
    events:
      - httpApi:
          path: /health
          method: get

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: false
    pipCmdExtraArgs:
      - --no-cache-dir

package:
  patterns:
    - "../*.py"
    - "../**/*.py"
    - "!../tests/**"
    - "!../**/__pycache__/**"
    - "!../deployment/**"
    - "!node_modules/**"
    - "!.git/**"
    - "!.pytest_cache/**"
    - "!.env"
    - "!.DS_Store"
    - "!*.pyc"

resources:
  Description: "Voice Gateway Voice Authentication Lambda functions"

  Outputs:
    VoiceAuthenticationProcessorArn:
      Description: "Voice Authentication Processor Lambda ARN"
      Value:
        Ref: VoiceAuthenticationProcessorLambdaFunction
      Export:
        Name: ${self:service}-${self:provider.stage}-VoiceAuthenticationProcessorArn

    VoiceAuthHealthCheckArn:
      Description: "Voice Authentication Health Check Lambda ARN"
      Value:
        Ref: VoiceAuthHealthCheckLambdaFunction
      Export:
        Name: ${self:service}-${self:provider.stage}-VoiceAuthHealthCheckArn
